name: Integration Tests

on:
  workflow_dispatch:
  schedule:
    # Run daily at 2am UTC
    - cron: '0 2 * * *'

jobs:
  test-against-api:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests cryptography pyperclip flask

    - name: Test basic operations
      env:
        API_URL: ${{ secrets.TEST_API_URL || 'https://key-value.vercel.app' }}
      run: |
        python -c "
        import requests
        import json
        import sys
        import os

        api_url = os.environ.get('API_URL', 'https://key-value.vercel.app')
        print(f'Testing against: {api_url}')

        # Test 1: Generate token
        print('Test 1: Generate token...')
        resp = requests.get(f'{api_url}/api/generate')
        resp.raise_for_status()
        token = resp.json()['token']
        print(f'✓ Generated token: {token}')

        # Test 2: Store data
        print('Test 2: Store data...')
        data = {'test': 'integration_test', 'timestamp': '2025-01-01'}
        resp = requests.post(
            f'{api_url}/api/store',
            json={'token': token, 'data': data}
        )
        resp.raise_for_status()
        print(f'✓ Stored data: {resp.json()}')

        # Test 3: Retrieve data
        print('Test 3: Retrieve data...')
        resp = requests.get(f'{api_url}/api/retrieve', params={'token': token})
        resp.raise_for_status()
        retrieved = resp.json()['data']
        print(f'✓ Retrieved data: {retrieved}')

        # Verify
        assert retrieved == data, f'Data mismatch! Expected {data}, got {retrieved}'
        print('✓ All integration tests passed!')
        "

    - name: Test encrypted operations
      env:
        API_URL: ${{ secrets.TEST_API_URL || 'https://key-value.vercel.app' }}
      run: |
        python -c "
        import requests
        import json
        import sys
        import os
        from cryptography.fernet import Fernet
        import base64

        api_url = os.environ.get('API_URL', 'https://key-value.vercel.app')

        # Generate token
        resp = requests.get(f'{api_url}/api/generate')
        token = resp.json()['token']

        # Encrypt data
        key = Fernet.generate_key()
        cipher = Fernet(key)
        secret = {'password': 'super_secret_123'}
        encrypted = cipher.encrypt(json.dumps(secret).encode())

        # Store encrypted
        data = {
            'encrypted': True,
            'payload': base64.b64encode(encrypted).decode()
        }
        resp = requests.post(
            f'{api_url}/api/store',
            json={'token': token, 'data': data}
        )
        resp.raise_for_status()

        # Retrieve and decrypt
        resp = requests.get(f'{api_url}/api/retrieve', params={'token': token})
        retrieved = resp.json()['data']
        encrypted_data = base64.b64decode(retrieved['payload'])
        decrypted = json.loads(cipher.decrypt(encrypted_data).decode())

        assert decrypted == secret, 'Encryption test failed!'
        print('✓ Encrypted operations test passed!')
        "
